# -*- ruby -*-

require './script/autobundle'

require 'autotest/bundler'

#ENV['disable_live'] = 't'
Autotest.add_hook :initialize do |at|
#   at.extra_files << "../some/external/dependency.rb"
#
#   at.libs << ":../some/external"
#
#   at.add_exception 'vendor'
  # these have to be a regex, sometimes autotest sees the file as
  # test/test_something.rb
  # ./test/test_comething.rb
  at.add_exception %r'(^|/).git/'
  at.add_exception %r'(^|/)coverage/'
  at.add_exception %r'(^|/)doc/'
  at.add_exception %r'(^|/)log/'
  at.add_exception %r'(^|/)public/'
  at.add_exception %r'(^|/)ruote_work/'
  at.add_exception %r'(^|/)test/cache/'
  at.add_exception %r'(^|/)test/reports/'
  at.add_exception %r'(^|/)vendor/bundle/'

  # rerun functional tests if endpoint changes
  at.add_mapping(/^app\/endpoints\/.*rb$/) do |filename, _|
    possible = File.basename(filename).gsub '_', '_?' # ' stupid emacs
    at.files_matching %r%^test/functional/.*#{possible}$%
  end

  at.add_mapping(/^lib\/backends\/.*rb$/) do |filename, _|
    possible = File.basename(filename).gsub '_', '_?' # ' stupid emacs
    at.files_matching %r%^test/backends/.*#{possible}$%
  end

  at.add_mapping(/\Aapp\/models\/.*rb\z/) do |filename,_|
    possible = File.basename(filename).gsub '_', '_?' # ' stupid emacs
    at.files_matching %r%^test/.*#{possible}$%
  end

  # rerun all tests if no matching file is found
  at.add_mapping(/\A(app|lib).*rb/) do |f, _|
    at.files_matching(/\Atest.*rb\z/)
  end

#
#   at.add_mapping(/dependency.rb/) do |f, _|
#     at.files_matching(/test_.*rb$/)
#   end
#
#   %w(TestA TestB).each do |klass|
#     at.extra_class_map[klass] = "test/test_misc.rb"
#   end
  false
end

# uncomment to see if more exceptions should be added
#Autotest.add_hook :updated do |at, updated|
  #p updated
  #false
#end
# Autotest.add_hook :run_command do |at|
#   system "rake build"
# end
# vim: set ft=ruby :
